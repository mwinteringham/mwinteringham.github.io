I".<p>In the <a href="http://www.mwtestconsultancy.co.uk/automated-api-framework-part-1">previous post on creating an automated api framework</a> we created a framework and a series of automated checks that will run some basic GET request checks against <a href="https://github.com/mwinteringham/restful-booker">restful-booker</a>. If you haven’t gone through  the <a href="http://www.mwtestconsultancy.co.uk/automated-api-framework-part-1">previous post</a> I would recommend you do so before you continue.</p>

<p>…Welcome back! So let’s recap on what we’ve created so far:</p>

<p><img src="/wp-content/uploads/2016/04/file-structure-itp1.png" alt="" /></p>

<ul>
  <li><em>spec</em> stores our automated checks</li>
  <li><em>api</em> a library of API endpoints we use in <em>spec</em> to communication with <a href="https://github.com/mwinteringham/restful-booker">restful-booker</a></li>
  <li><em>gemfile</em> / <em>Rakefile</em> manages the running of our framework and it’s dependencies</li>
</ul>

<p>We left the <a href="http://www.mwtestconsultancy.co.uk/automated-api-framework-part-1">previous post</a> with three checks focused on GET requests but now we want to expand it to cover more than just GET requests.  So let’s look into how we can extend the framework to create and send a POST request.</p>

<h1 id="payloads-and-the-builder-pattern">Payloads and the builder pattern</h1>

<p>Traditionally POST requests require some <a href="http://stackoverflow.com/questions/23118249/whats-the-difference-between-request-payload-vs-form-data-as-seen-in-chrome">sort of data that we want to be consumed and actioned upon by our web service / application</a>.  For <a href="https://github.com/mwinteringham/restful-booker">restful-booker</a> it wants a JSON payload in the POST request to /booking so we need to create the ability to generate payloads, which we can do using the builder pattern model.</p>

<p><strong>Erm, What is the builder pattern?</strong></p>

<p><a href="https://twitter.com/friendlytester">@FriendlyTester</a> has a <a href="http://www.thefriendlytester.co.uk/2015/06/an-introduction-to-data-builder-pattern.html">great blog post on what the builder pattern is</a> and it’s context to data creation, which is what we’ll be using the pattern for.  I would suggest giving it a read before continuing.</p>

<p><a href="https://github.com/mwinteringham/restful-booker">Restful-booker</a> takes a ‘booking’ payload (naturally), so first create a new folder within the root of your project named <em>payloads</em> and within that folder create a new file named <em>booking_payload.rb</em> and paste the following in:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BookingPayload</span>

  <span class="nb">attr_accessor</span> <span class="ss">:firstname</span><span class="p">,</span> <span class="ss">:lastname</span><span class="p">,</span> <span class="ss">:totalprice</span><span class="p">,</span> <span class="ss">:depositpaid</span><span class="p">,</span> <span class="ss">:checkin</span><span class="p">,</span> <span class="ss">:checkout</span><span class="p">,</span> <span class="ss">:additionalneeds</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="nb">instance_eval</span> <span class="o">&amp;</span><span class="n">block</span> <span class="k">if</span> <span class="nb">block_given?</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">toJson</span>
    <span class="k">return</span> <span class="s2">"{
        </span><span class="se">\"</span><span class="s2">firstname</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="si">#{</span><span class="n">firstname</span><span class="si">}</span><span class="se">\"</span><span class="s2">,
        </span><span class="se">\"</span><span class="s2">lastname</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="si">#{</span><span class="n">lastname</span><span class="si">}</span><span class="se">\"</span><span class="s2">,
        </span><span class="se">\"</span><span class="s2">totalprice</span><span class="se">\"</span><span class="s2">: </span><span class="si">#{</span><span class="n">totalprice</span><span class="si">}</span><span class="s2">,
        </span><span class="se">\"</span><span class="s2">depositpaid</span><span class="se">\"</span><span class="s2">: </span><span class="si">#{</span><span class="n">depositpaid</span><span class="si">}</span><span class="s2">,
        </span><span class="se">\"</span><span class="s2">bookingdates</span><span class="se">\"</span><span class="s2">: {
            </span><span class="se">\"</span><span class="s2">checkin</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="si">#{</span><span class="n">checkin</span><span class="si">}</span><span class="se">\"</span><span class="s2">,
            </span><span class="se">\"</span><span class="s2">checkout</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="si">#{</span><span class="n">checkout</span><span class="si">}</span><span class="se">\"</span><span class="s2">
        },
        </span><span class="se">\"</span><span class="s2">additionalneeds</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="si">#{</span><span class="n">additionalneeds</span><span class="si">}</span><span class="se">\"</span><span class="s2">
    }"</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>So how does this builder work?</p>

<ol>
  <li>The <em>attr_accessor</em> in the class is a shortcut method that allows you to store a variable of say, for example, <em>firstname</em> and create getter and setter methods for it to allow you to update at any point in our checks</li>
  <li>The <em>intialize</em> method is where the magic happens.  It allows us to instantiate a new <em>BookingPayload</em> object and the <em>&amp;block</em> allows to set the values we want to set for that object</li>
  <li>Finally <em>toJson</em> takes the values we stored in the payload and generates a stringified version of the booking JSON that we will use to add to our request</li>
</ol>

<p>And that’s it!  So let’s create that POST /booking check.</p>

<h1 id="lets-create-some-checks">Let’s create some checks!</h1>

<p>Since we are sending a POST request to the web service we need to create a new method to create the POST request.  So we add the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_booking</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">content_type</span><span class="p">)</span>
    <span class="k">begin</span>
      <span class="k">return</span> <span class="no">RestClient</span><span class="p">.</span><span class="nf">post</span> <span class="s1">'http://localhost:3001/booking'</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="ss">:accept</span> <span class="o">=&gt;</span> <span class="ss">:json</span><span class="p">,</span> <span class="ss">:content_type</span> <span class="o">=&gt;</span> <span class="n">content_type</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
      <span class="k">return</span> <span class="n">e</span><span class="p">.</span><span class="nf">response</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Notice how we now add a <em>payload</em> along with additional headers around <em>accept</em> and <em>content_type</em>.</p>

<p>Next, add a link to your new payload builder in <em>spec_helper.rb</em> by adding the following into the file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'./payloads/booking_payload'</span>
</code></pre></div></div>

<p>And finally with the booking payload class available to use we can add our new check-in <em>integration_spec.rb</em></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">it</span><span class="p">(</span><span class="s1">'POST /booking should return a 200'</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="no">BookingPayload</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">firstname</span> <span class="o">=</span> <span class="s1">'Sally'</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">lastname</span> <span class="o">=</span> <span class="s1">'Jenkins'</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">totalprice</span> <span class="o">=</span> <span class="mi">111</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">depositpaid</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">checkin</span> <span class="o">=</span> <span class="s1">'11-11-2010'</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">checkout</span> <span class="o">=</span> <span class="s1">'12-11-2010'</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">additionalneeds</span> <span class="o">=</span> <span class="s1">'Breakfast'</span>
    <span class="k">end</span>

    <span class="n">response</span> <span class="o">=</span> <span class="no">Booking</span><span class="p">.</span><span class="nf">create_booking</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">toJson</span><span class="p">,</span> <span class="ss">:json</span><span class="p">)</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">code</span><span class="p">).</span><span class="nf">to</span> <span class="n">be</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>What is happening here is that in addition to the request and assertion in the check we are creating a <em>BookingPayload</em> specific to the check by instantiating a new <em>BookingPayload</em> and passing values that we want to be added to the payload.  We then call <em>payload.toJson</em> when sending the request to create the stringified JSON object that <em>create_booking</em> adds to the request and creates the booking and returns a 200.</p>

<h1 id="conclusion">Conclusion</h1>

<p>So in summary what we’ve done is:</p>

<p><img src="/wp-content/uploads/2016/05/file-structure-itp2.png" alt="" /></p>

<ol>
  <li>Extended our framework to now include a library of payload builders that can be shared across any checks or requests we want to make (For example <em>BookingPayload</em> can be used for both POST and PUT requests)</li>
  <li>Also extended our API library to now include both GET and POST HTTP requests</li>
</ol>

<p>For the final post in the series, we will look at combining multiple requests in a check for more complex scenarios.</p>
:ET