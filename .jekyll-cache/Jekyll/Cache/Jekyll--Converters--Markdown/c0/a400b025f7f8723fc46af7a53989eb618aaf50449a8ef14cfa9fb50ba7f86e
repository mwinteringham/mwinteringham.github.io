I"a<p>Postman cheat sheet is something I have wanted to put together for a while as a response to helping attendees of my <a href="http://www.mwtestconsultancy.co.uk/testing-web-services-training/">Testing API and Web services training</a>. The cheat contains a high-level collection of the features available in Postman to help you to automate APIs and Web services. Unless stated otherwise the methods below are used in the <strong>Tests tab</strong> and some can be found on the right-hand section of the Tests tab labelled <strong>snippets</strong>.</p>

<p>I’ve organised the Postman cheat sheet based on problems users of Postman are trying to solve based on observations from previous training sessions and questions from <a href="https://postmancommunity.slack.com/">Postman slack community</a>. However, if there is something else you want to see added to the Postman cheat sheet, get in touch with me via Twitter <a href="https://twitter.com/2bittester">@2bittester</a>.</p>

<p>For more detailed information on each feature, check out <a href="https://www.getpostman.com/docs">https://www.getpostman.com/docs</a>.</p>

<h2 id="using-variables">Using variables</h2>

<p><strong>Note:</strong> Variables are shared as strings across Postman. This means you need to ensure that whatever you want to store has to be converted to a string before storing. Failing to convert can result in behaviour such as stored parsed response bodies return as <code class="language-plaintext highlighter-rouge">[Object object]</code> instead of the original body. You can learn more about sharing response bodies <a href="http://www.mwtestconsultancy.co.uk/postman-sharing-payloads/">here</a>.</p>

<h3 id="setting">Setting</h3>

<p><strong>Global</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postman.setGlobalVariable("myVariable", "localhost");
</code></pre></div></div>
<p>Overrides variables of lower scope with the same name</p>

<p><strong>Environmental</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postman.setEnvironmentVariable("myVariable", "localhost");
</code></pre></div></div>
<p>Can be overridden by a global variable of the same name</p>

<h3 id="reading-variables-in-request-builder">Reading variables in request builder</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p>For example with the variable “myVariable” set to “localhost”, using <code class="language-plaintext highlighter-rouge">http://:8080/ping</code> will create a string of <code class="language-plaintext highlighter-rouge">http://localhost:8080</code></p>

<h3 id="reading-variables-in-test-tab">Reading variables in test tab</h3>

<p><strong>Global</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var variableToUse = getGlobalVariable("myVariable");
</code></pre></div></div>
<p>Assigns stored variable “myVariable” to the variableToUse for future use.</p>

<p><strong>Environmental</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var variableToUse = getEnvironmentVariable("myVariable");
</code></pre></div></div>
<p>Assigns stored variable “myVariable” to the variableToUse for future use.</p>

<h3 id="clearing">Clearing</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postman.clearEnvironmentVariable("myVariable");
</code></pre></div></div>

<p>Reference: <a href="https://www.getpostman.com/docs/postman/environments_and_globals/variables">https://www.getpostman.com/docs/postman/environments_and_globals/variables</a></p>

<h1 id="status-codes">Status codes</h1>

<p><strong>Assert status code matches expected status code</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tests["Status code is 200"] = responseCode.code === 200;
</code></pre></div></div>

<p><strong>Assert status code name</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tests["Status code name has string"] = responseCode.name.has("Created");
</code></pre></div></div>

<h1 id="headers">Headers</h1>

<p><strong>Assert header is present</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tests["Content-Type is present"] = postman.getResponseHeader("Content-Type");
</code></pre></div></div>

<p><strong>Assert header value</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var header = postman.getResponseHeader("Content-Type");

tests["Header contains value"] = header === "text/html";
</code></pre></div></div>

<h1 id="reponse-bodies">Reponse Bodies</h1>

<p><strong>Assert JSON object contains a value</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var jsonData = JSON.parse(responseBody);
tests["Assert JSON data"] = jsonData.value === 100;
</code></pre></div></div>
<p><strong>Assert XML object contains a value</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var jsonData = xml2Json(responseBody);
tests["Assert XML data"] = jsonData.value === 100;
</code></pre></div></div>
<p><strong>Assert HTML page contains a value</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var responseHTML = document.createElement("html");
responseHTML.innerHTML = responseBody;

inputs = responseHTML.querySelector(".w3col &gt; ol &gt; li:nth-child(1)");

tests["First item in list is named 'First item'"] = inputs.innerHTML === "First item";
</code></pre></div></div>
<p>Taken from <a href="http://www.mwtestconsultancy.co.uk/postman-parsing-html-responses/">Parsing HTML responses</a>. This uses CSS Selectors to extract required content. You can discover more on css selectors at <a href="https://www.w3schools.com/cssref/css_selectors.asp">w3schools</a>.</p>

<p><strong>Assert x-www-form-urlencoded string contains a value</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var queryString = {};
responseBody.replace(
    new RegExp("([^?=&amp;]+)(=([^&amp;]*))?", "g"),
    function($0, $1, $2, $3) { queryString[$1] = $3; }
);

tests["Assert urlencode payload"] = queryString["name_of_key"] === "value";
</code></pre></div></div>
<p>Regex extractor based on code from <a href="http://stevenbenner.com/2010/03/javascript-regex-trick-parse-a-query-string-into-an-object/">Steven Benner’s blog post</a>.</p>

<h1 id="custom-logging">Custom logging</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log('Event I am interested in');
</code></pre></div></div>

<h1 id="conditional-workflows">Conditional workflows</h1>

<p><strong>Set next request to run</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postman.setNextRequest(“Request Name”);
</code></pre></div></div>

<p><strong>Exit current run</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>postman.setNextRequest(“null”);
</code></pre></div></div>

<p>Based on information from the following <a href="http://blog.getpostman.com/2016/03/23/conditional-workflows-in-postman/">Postman blog post</a></p>
:ET